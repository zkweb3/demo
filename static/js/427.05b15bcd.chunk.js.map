{"version":3,"file":"static/js/427.05b15bcd.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/edition-drop-279b311e.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { aS as StandardErc1155, cM as ContractWrapper, am as ContractMetadata, cN as DropErc1155ContractSchema, an as ContractRoles, ao as ContractRoyalty, ap as ContractPrimarySale, as as DropErc1155ClaimConditions, aX as ContractEvents, at as DropErc1155History, al as ContractEncoder, aW as GasCostEstimator, aZ as ContractPlatformFee, aY as ContractInterceptor, aL as Erc1155, cL as PaperCheckout, a$ as ContractOwner, bC as getRoleHash } from './thirdweb-checkout-2c8d478b.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport 'bs58';\n\n/**\n * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"edition-drop\");\n * ```\n *\n * @public\n */\nclass EditionDrop extends StandardErc1155 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions for each NFT\n   * @remarks Define who can claim each NFT in the edition, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await contract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"claimConditions\", void 0);\n    _defineProperty(this, \"checkout\", void 0);\n    _defineProperty(this, \"history\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"erc1155\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc1155ContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, EditionDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropErc1155ClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new DropErc1155History(this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  // TODO getAllClaimerAddresses() - should be done via an indexer\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  async createBatch(metadatas, options) {\n    return this.erc1155.lazyMint(metadatas, options);\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData - Optional claim verification data (e.g. price, allowlist proof, etc...)\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity) {\n    let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return this.erc1155.getClaimTransaction(destinationAddress, tokenId, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  async claimTo(destinationAddress, tokenId, quantity) {\n    let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return this.erc1155.claimTo(destinationAddress, tokenId, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim a token to the connected wallet\n   *\n   * @remarks See {@link EditionDrop.claimTo}\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  async claim(tokenId, quantity) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const address = await this.contractWrapper.getSignerAddress();\n    return this.claimTo(address, tokenId, quantity, checkERC20Allowance);\n  }\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnTokens(tokenId, amount);\n   * ```\n   */\n  async burnTokens(tokenId, amount) {\n    return this.erc1155.burn(tokenId, amount);\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(EditionDrop, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { EditionDrop };\n"],"names":["EditionDrop","_StandardErc","_inherits","_super","_createSuper","network","address","storage","_this","_classCallCheck","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","call","_defineProperty","_assertThisInitialized","metadata","ContractMetadata","DropErc1155ContractSchema","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","claimConditions","DropErc1155ClaimConditions","events","ContractEvents","history","DropErc1155History","encoder","ContractEncoder","estimator","GasCostEstimator","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","erc1155","Erc1155","checkout","PaperCheckout","owner","ContractOwner","_createClass","key","value","this","updateSignerOrProvider","readContract","_getAll","_asyncToGenerator","_regeneratorRuntime","mark","_callee","queryParams","wrap","_context","prev","next","abrupt","getAll","stop","_x","apply","_getOwned","_callee2","walletAddress","_context2","getOwned","_x2","_getTotalCount","_callee3","_context3","totalCount","_isTransferRestricted","_callee4","anyoneCanTransfer","_context4","hasRole","getRoleHash","constants","sent","_createBatch","_callee5","metadatas","_context5","lazyMint","_x3","_x4","_getClaimTransaction","_callee6","destinationAddress","tokenId","quantity","checkERC20Allowance","_args6","_context6","getClaimTransaction","_x5","_x6","_x7","_claimTo","_callee7","_args7","_context7","claimTo","_x8","_x9","_x10","_claim","_callee8","_args8","_context8","getSignerAddress","_x11","_x12","_burnTokens","_callee9","amount","_context9","burn","_x13","_x14","_call","_callee10","functionName","_this$contractWrapper","_len","args","_key","_args10","_context10","Array","concat","_x15","StandardErc1155"],"sourceRoot":""}