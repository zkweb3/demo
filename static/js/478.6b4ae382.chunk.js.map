{"version":3,"file":"static/js/478.6b4ae382.chunk.js","mappings":"mTAuFMA,G,yjBAAI,WAQR,SAAAA,EAAYC,EAASC,EAASC,IAASC,EAAAA,EAAAA,GAAA,KAAAJ,GACrC,IAAIK,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC/EG,EAAMH,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAC5CE,EAAUJ,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAChDG,EAAkBL,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,IAAIM,EAAAA,GAAgBX,EAASC,EAASO,EAAKJ,IACrIQ,EAAAA,EAAAA,GAAgBC,KAAM,uBAAmB,IACzCD,EAAAA,EAAAA,GAAgBC,KAAM,eAAW,IACjCD,EAAAA,EAAAA,GAAgBC,KAAM,WAAO,IAC7BD,EAAAA,EAAAA,GAAgBC,KAAM,gBAAY,IAClCD,EAAAA,EAAAA,GAAgBC,KAAM,eAAW,IACjCD,EAAAA,EAAAA,GAAgBC,KAAM,iBAAa,IACnCD,EAAAA,EAAAA,GAAgBC,KAAM,cAAU,IAChCD,EAAAA,EAAAA,GAAgBC,KAAM,mBAAe,IACrCD,EAAAA,EAAAA,GAAgBC,KAAM,gBAAY,GAClCA,KAAKC,SAAWL,EAChBI,KAAKL,IAAMA,EACXK,KAAKH,gBAAkBA,EACvBG,KAAKX,QAAUA,EACfW,KAAKE,SAAW,IAAIC,EAAAA,GAAiBH,KAAKH,gBAAiBO,EAAAA,GAAoBJ,KAAKX,SACpFW,KAAKK,QAAU,IAAIC,EAAAA,GAAgBN,KAAKH,iBACxCG,KAAKO,UAAY,IAAIC,EAAAA,GAAiBR,KAAKH,iBAC3CG,KAAKS,OAAS,IAAIC,EAAAA,GAAeV,KAAKH,iBACtCG,KAAKW,YAAc,IAAIC,EAAAA,GAAoBZ,KAAKH,gBAClD,CAuTC,OAvTAgB,EAAAA,EAAAA,GAAA3B,EAAA,EAAA4B,IAAA,UAAAC,IA1BD,WACE,OAAOf,KAAKC,QACd,GAAC,CAAAa,IAAA,mBAAAE,MAyBD,SAAiB7B,GACfa,KAAKH,gBAAgBoB,uBAAuB9B,EAC9C,GAAC,CAAA2B,IAAA,aAAAE,MACD,WACE,OAAOhB,KAAKH,gBAAgBqB,aAAa9B,OAC3C,GAMA,CAAA0B,IAAA,MAAAE,MAAA,eAAAG,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAMA,SAAAC,EAAUC,GAAU,IAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACA9B,KAAK+B,SAAQ,OAC+C,GADxEN,EAAGG,EAAAI,KAEgB,KADnBN,EAAYD,EAAIQ,QAAO,SAAAC,GAAC,OAAIA,EAAEV,WAAWW,GAAGC,EAAAA,GAAAA,KAAeZ,GAAY,KAC/D/B,OAAY,CAAAmC,EAAAE,KAAA,cAClB,IAAIO,MAAM,sBAAqB,cAAAT,EAAAU,OAAA,SAEhCZ,EAAU,IAAE,wBAAAE,EAAAW,OAAA,GAAAhB,EAAA,UACpB,gBAAAiB,GAAA,OAAArB,EAAAsB,MAAA,KAAAjD,UAAA,EAbD,IAeA,CAAAsB,IAAA,SAAAE,MAAA,eAAA0B,GAAAtB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAaA,SAAAqB,IAAA,IAAAC,EAAA,YAAAvB,EAAAA,EAAAA,KAAAM,MAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OACgB,OADhBe,EAAAC,GACSC,QAAOF,EAAAf,KAAA,EAAY9B,KAAKH,gBAAgBqB,aAAa8B,kBAAiB,OAa3E,OAb2EH,EAAAI,GAAAJ,EAAAb,KAAEkB,IAAG,eAAAC,GAAA/B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAA8B,EAAMC,GAAI,OAAAhC,EAAAA,EAAAA,KAAAM,MAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,OAKpE,OALoEwB,EAAAR,GAC/EO,EAAK7B,WAAU8B,EAAAL,GACjBI,EAAKE,SAAQD,EAAAE,GACVH,EAAKI,YAAWH,EAAAI,GACjBL,EAAKM,WAAUL,EAAAM,GACjBP,EAAKQ,SAAQP,EAAAxB,KAAA,EACVc,EAAK/C,gBAAgBqB,aAAa4C,MAAMT,EAAK7B,YAAW,cAAA8B,EAAAS,GAAAT,EAAAtB,KAAAsB,EAAAxB,KAAA,GACxDc,EAAKoB,iBAAiBX,EAAK7B,YAAW,QAKhD,OALgD8B,EAAAW,GAAAX,EAAAtB,KAAAsB,EAAAY,GACvCb,EAAK,GAAGH,KAAI,SAACiB,EAAGC,GAAC,MAAM,CACjCC,UAAWhB,EAAKiB,QAAQF,GACxBG,iBAAkBJ,EAClBK,gBAAiBnB,EAAKoB,UAAUL,GACjC,IAAEd,EAAAhB,OAAA,UAXHd,WAAU8B,EAAAR,GACVS,SAAQD,EAAAL,GACRQ,YAAWH,EAAAE,GACXG,WAAUL,EAAAI,GACVG,SAAQP,EAAAM,GACRE,MAAKR,EAAAS,GACLW,MAAKpB,EAAAW,GACLU,WAAUrB,EAAAY,KAAA,yBAAAZ,EAAAf,OAAA,GAAAa,EAAA,KAKV,gBAAAwB,GAAA,OAAAzB,EAAAV,MAAA,KAAAjD,UAAA,EAbgF,IAahFqD,EAAAP,OAAA,SAAAO,EAAAC,GAbarB,IAAGoD,KAAAhC,EAAAC,GAAAD,EAAAI,KAAA,wBAAAJ,EAAAN,OAAA,GAAAI,EAAA,UAcnB,yBAAAD,EAAAD,MAAA,KAAAjD,UAAA,EA5BD,IA8BA,CAAAsB,IAAA,mBAAAE,MAAA,eAAA8D,GAAA1D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAIA,SAAAyD,EAAuBvD,GAAU,IAAAkD,EAAA,OAAArD,EAAAA,EAAAA,KAAAM,MAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAAAkD,EAAAlD,KAAA,EACX9B,KAAKH,gBAAgBqB,aAAa+D,cAAczD,GAAW,OAApE,OAALkD,EAAKM,EAAAhD,KAAAgD,EAAA1C,OAAA,SACJ,CAAC,CACN4C,KAAMC,EAAAA,GAAAA,QACNC,MAAO,UACPC,MAAOX,EAAMY,cACZ,CACDJ,KAAMC,EAAAA,GAAAA,IACNC,MAAO,MACPC,MAAOX,EAAMa,UACZ,CACDL,KAAMC,EAAAA,GAAAA,QACNC,MAAO,UACPC,MAAOX,EAAMc,gBACb,wBAAAR,EAAAzC,OAAA,GAAAwC,EAAA,UACH,gBAAAU,GAAA,OAAAX,EAAArC,MAAA,KAAAjD,UAAA,EAnBD,IAqBA,CAAAsB,IAAA,WAAAE,MAAA,eAAA0E,GAAAtE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAmBA,SAAAqE,EAAenE,EAAYoE,GAAO,OAAAvE,EAAAA,EAAAA,KAAAM,MAAA,SAAAkE,GAAA,cAAAA,EAAAhE,KAAAgE,EAAA/D,MAAA,UAC3B8D,EAAS,CAAFC,EAAA/D,KAAA,eAAA+D,EAAA/D,KAAA,EACM9B,KAAKH,gBAAgBiG,mBAAkB,OAAvDF,EAAOC,EAAA7D,KAAA,cAAA6D,EAAAvD,OAAA,SAEFtC,KAAKH,gBAAgBqB,aAAa6E,SAASvE,EAAYoE,IAAQ,wBAAAC,EAAAtD,OAAA,GAAAoD,EAAA,UACvE,gBAAAK,EAAAC,GAAA,OAAAP,EAAAjD,MAAA,KAAAjD,UAAA,EAxBD,IA0BA,CAAAsB,IAAA,aAAAE,MAAA,eAAAkF,GAAA9E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAgBA,SAAA6E,EAAiB3E,GAAU,IAAA4E,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAnF,EAAAA,EAAAA,KAAAM,MAAA,SAAA8E,GAAA,cAAAA,EAAA5E,KAAA4E,EAAA3E,MAAA,cAAA2E,EAAA3E,KAAA,EACnB9B,KAAK0G,aAAalF,GAAW,cAAAiF,EAAA3E,KAAA,EACZ9B,KAAKe,IAAIS,GAAW,OAIkB,OAJvD4E,EAAQK,EAAAzE,KACRqE,EAAMD,EAASzB,WAAWzB,KAAI,SAAAhB,GAAC,OAAIA,EAAEmC,SAAS,IAC9CiC,EAASF,EAASzB,WAAWzB,KAAI,SAAAhB,GAAC,OAAIA,EAAEqC,gBAAgB,IACxDgC,EAAQH,EAASzB,WAAWzB,KAAI,SAAAhB,GAAC,OAAIA,EAAEsC,eAAe,IACtDgC,EAAkBG,EAAAA,GAAgBP,EAAS3C,aAAYgD,EAAA5E,KAAA,EAAA4E,EAAA3E,KAAA,GAErD9B,KAAKH,gBAAgB+G,aAAaC,QAAQR,EAAKC,EAAQC,EAAOC,GAAgB,eAAAC,EAAAnE,OAAA,UAC7E,GAAI,eAAAmE,EAAA5E,KAAA,GAAA4E,EAAA3D,GAAA2D,EAAA,SAAAA,EAAAnE,OAAA,UAEJ,GAAK,yBAAAmE,EAAAlE,OAAA,GAAA4D,EAAA,mBAEf,gBAAAW,GAAA,OAAAZ,EAAAzD,MAAA,KAAAjD,UAAA,EA7BD,IA+BA,CAAAsB,IAAA,UAAAE,MAAA,eAAA+F,GAAA3F,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAKA,SAAA0F,IAAA,IAAAC,EAAA,OAAA5F,EAAAA,EAAAA,KAAAM,MAAA,SAAAuF,GAAA,cAAAA,EAAArF,KAAAqF,EAAApF,MAAA,cAAAoF,EAAApF,KAAA,EACwB9B,KAAKH,gBAAgBqB,aAAaiG,SAASC,WAAWpH,KAAKH,gBAAgBqB,aAAa9B,SAAQ,OAAzG,OAAP6H,EAAOC,EAAAlF,KAAAkF,EAAA5E,OAAA,SACN,CACL+E,KAAM,GACNC,OAAQ,GACRC,SAAU,GACVvG,MAAOiG,EACPO,aAAcb,EAAAA,YAAyBM,EAAS,MACjD,wBAAAC,EAAA3E,OAAA,GAAAyE,EAAA,UACF,yBAAAD,EAAAtE,MAAA,KAAAjD,UAAA,EAdD,IAgBA,CAAAsB,IAAA,iBAAAE,MAAA,eAAAyG,GAAArG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAMA,SAAAoG,EAAqBC,GAAY,IAAAC,EAAA,OAAAvG,EAAAA,EAAAA,KAAAM,MAAA,SAAAkG,GAAA,cAAAA,EAAAhG,KAAAgG,EAAA/F,MAAA,OAEiD,OAD1E8F,EAAQ,IAAIE,EAAAA,GAASH,EAAcI,EAAU/H,KAAKH,gBAAgBmI,eAAcH,EAAA/E,GACzEmF,EAAAA,GAAkBJ,EAAA5E,GAACjD,KAAKH,gBAAgBmI,cAAaH,EAAArE,GAAEmE,EAAYE,EAAA/F,KAAA,EAAQ8F,EAAMM,UAAUlI,KAAKH,gBAAgBqB,aAAa9B,SAAQ,cAAAyI,EAAAnE,GAAAmE,EAAA7F,KAAA6F,EAAA/F,KAAA,KAAA+F,EAAA/E,IAAA+E,EAAA5E,GAAA4E,EAAArE,GAAAqE,EAAAnE,IAAA,cAAAmE,EAAAvF,OAAA,SAAAuF,EAAA7F,MAAA,yBAAA6F,EAAAtF,OAAA,GAAAmF,EAAA,UACnJ,gBAAAS,GAAA,OAAAV,EAAAhF,MAAA,KAAAjD,UAAA,EATD,IAWA,CAAAsB,IAAA,eAAAE,MAAA,eAAAoH,GAAAhH,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAMA,SAAA+G,EAAmB7G,GAAU,OAAAH,EAAAA,EAAAA,KAAAM,MAAA,SAAA2G,GAAA,cAAAA,EAAAzG,KAAAyG,EAAAxG,MAAA,cAAAwG,EAAAzG,KAAA,EAAAyG,EAAAxG,KAAA,EAEnB9B,KAAKH,gBAAgBqB,aAAa4C,MAAMtC,GAAW,OAAA8G,EAAAxG,KAAA,qBAAAwG,EAAAzG,KAAA,EAAAyG,EAAAxF,GAAAwF,EAAA,SAEnDjG,MAAM,YAADkG,OAAa/G,EAAU,eAAa,wBAAA8G,EAAA/F,OAAA,GAAA8F,EAAA,kBAElD,gBAAAG,GAAA,OAAAJ,EAAA3F,MAAA,KAAAjD,UAAA,EAZD,IAcA,CAAAsB,IAAA,WAAAE,MAAA,eAAAyH,GAAArH,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAGA,SAAAoH,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA7H,EAAAA,EAAAA,KAAAM,MAAA,SAAAwH,GAAA,cAAAA,EAAAtH,KAAAsH,EAAArH,MAAA,cAAAqH,EAAArH,KAAA,EAC8GiB,QAAQtB,IAAI,CAACzB,KAAKH,gBAAgBqB,aAAa2H,cAAe7I,KAAKH,gBAAgBqB,aAAa4H,eAAgB9I,KAAKH,gBAAgBqB,aAAakI,QAASpJ,KAAKH,gBAAgBqB,aAAa,uBAAwBlB,KAAKH,gBAAgBqB,aAAamI,sBAAqB,OAAtR,OAAsRV,EAAAQ,EAAAnH,KAAA4G,GAAAU,EAAAA,EAAAA,GAAAX,EAAA,GAAjXE,EAAWD,EAAA,GAAEE,EAAYF,EAAA,GAAEG,EAAkBH,EAAA,GAAEI,EAAoBJ,EAAA,GAAEK,EAAsBL,EAAA,GAAAO,EAAArH,KAAA,IAChEyH,EAAAA,EAAAA,IAAsBvJ,KAAKH,gBAAgBmI,cAAee,GAAmB,QAAtF,OAAnBG,EAAmBC,EAAAnH,KAAAmH,EAAA7G,OAAA,SAClB,CACLuG,YAAaA,EAAYW,WACzBV,aAAcA,EAAaU,WAC3BT,mBAAAA,EACAG,oBAAAA,EACAF,qBAAsBA,EAAqBQ,WAC3CP,uBAAwBA,EAAuBO,aAChD,yBAAAL,EAAA5G,OAAA,GAAAmG,EAAA,UACF,yBAAAD,EAAAhG,MAAA,KAAAjD,UAAA,EAdD,IAoBA,CAAAsB,IAAA,UAAAE,MAAA,eAAAyI,GAAArI,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAkCA,SAAAoI,EAAcjG,EAAakB,GAAU,IAAA0B,EAAAC,EAAAC,EAAAoD,EAAAC,EAAA,OAAAvI,EAAAA,EAAAA,KAAAM,MAAA,SAAAkI,GAAA,cAAAA,EAAAhI,KAAAgI,EAAA/H,MAAA,OAUiB,OAT/C6C,IACHA,EAAa,CAAC,CACZN,UAAWrE,KAAKH,gBAAgBqB,aAAa9B,QAC7CmF,iBAAkB,EAClBC,gBAAiB,QAGf6B,EAAM1B,EAAWzB,KAAI,SAAAhB,GAAC,OAAIA,EAAEmC,SAAS,IACrCiC,EAAS3B,EAAWzB,KAAI,SAAAhB,GAAC,OAAIA,EAAEqC,gBAAgB,IAC/CgC,EAAQ5B,EAAWzB,KAAI,SAAAhB,GAAC,OAAIA,EAAEsC,eAAe,IAACqF,EAAA/H,KAAA,EAC9B9B,KAAKH,gBAAgBiK,gBAAgB,UAAW,CAACzD,EAAKC,EAAQC,EAAO9C,IAAa,OAC1B,OADxEkG,EAAOE,EAAA7H,KACP4H,EAAQ5J,KAAKH,gBAAgBkK,UAAU,kBAA0B,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAASK,MAAKH,EAAAvH,OAAA,SACvE,CACL2H,GAAIL,EAAM,GAAGM,KAAK1I,WAClBmI,QAAAA,IACD,wBAAAE,EAAAtH,OAAA,GAAAmH,EAAA,UACF,gBAAAS,EAAAC,GAAA,OAAAX,EAAAhH,MAAA,KAAAjD,UAAA,EAnDD,IAqDA,CAAAsB,IAAA,OAAAE,MAAA,eAAAqJ,GAAAjJ,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAoBA,SAAAgJ,EAAW9I,EAAY+I,GAAQ,IAAAC,EAAAC,EAAAjL,UAAA,OAAA6B,EAAAA,EAAAA,KAAAM,MAAA,SAAA+I,GAAA,cAAAA,EAAA7I,KAAA6I,EAAA5I,MAAA,OACsD,OAA/E0I,EAASC,EAAUhL,OAAS,QAAsBC,IAAjB+K,EAAU,GAAmBA,EAAU,GAAK,GAAEC,EAAA5I,KAAA,EAC7E9B,KAAK0G,aAAalF,GAAW,cAAAkJ,EAAA5I,KAAA,EAElB9B,KAAKH,gBAAgBiK,gBAAgB,qBAAsB,CAACtI,EAAY+I,EAAUC,IAAQ,cAAAE,EAAA5H,GAAA4H,EAAA1I,KAAA0I,EAAApI,OAAA,UAAzGqH,QAAOe,EAAA5H,KAAA,wBAAA4H,EAAAnI,OAAA,GAAA+H,EAAA,UAEV,gBAAAK,EAAAC,GAAA,OAAAP,EAAA5H,MAAA,KAAAjD,UAAA,EA1BD,IA4BA,CAAAsB,IAAA,UAAAE,MAAA,eAAA6J,GAAAzJ,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAcA,SAAAwJ,EAActJ,GAAU,IAAA4E,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAnF,EAAAA,EAAAA,KAAAM,MAAA,SAAAoJ,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAAjJ,MAAA,cAAAiJ,EAAAjJ,KAAA,EAChB9B,KAAK0G,aAAalF,GAAW,cAAAuJ,EAAAjJ,KAAA,EACZ9B,KAAKe,IAAIS,GAAW,OAIkB,OAJvD4E,EAAQ2E,EAAA/I,KACRqE,EAAMD,EAASzB,WAAWzB,KAAI,SAAAhB,GAAC,OAAIA,EAAEmC,SAAS,IAC9CiC,EAASF,EAASzB,WAAWzB,KAAI,SAAAhB,GAAC,OAAIA,EAAEqC,gBAAgB,IACxDgC,EAAQH,EAASzB,WAAWzB,KAAI,SAAAhB,GAAC,OAAIA,EAAEsC,eAAe,IACtDgC,EAAkBG,EAAAA,GAAgBP,EAAS3C,aAAYsH,EAAAjJ,KAAA,GAE5C9B,KAAKH,gBAAgBiK,gBAAgB,UAAW,CAACzD,EAAKC,EAAQC,EAAOC,IAAiB,eAAAuE,EAAAjI,GAAAiI,EAAA/I,KAAA+I,EAAAzI,OAAA,UAArGqH,QAAOoB,EAAAjI,KAAA,yBAAAiI,EAAAxI,OAAA,GAAAuI,EAAA,UAEV,gBAAAE,GAAA,OAAAH,EAAApI,MAAA,KAAAjD,UAAA,EAxBD,IA0BA,CAAAsB,IAAA,OAAAE,MAAA,eAAAiK,GAAA7J,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAGA,SAAA4J,EAAWC,GAAY,IAAAC,EAAAC,EAAAnB,EAAAoB,EAAAC,EAAA/L,UAAA,OAAA6B,EAAAA,EAAAA,KAAAM,MAAA,SAAA6J,GAAA,cAAAA,EAAA3J,KAAA2J,EAAA1J,MAAA,OACrB,IAASuJ,EAAOE,EAAU9L,OAAQyK,EAAO,IAAIuB,MAAMJ,EAAO,EAAIA,EAAO,EAAI,GAAIC,EAAO,EAAGA,EAAOD,EAAMC,IAClGpB,EAAKoB,EAAO,GAAKC,EAAUD,GAC5B,OAAAE,EAAAlJ,OAAA,UACM8I,EAAApL,KAAKH,iBAAgBgF,KAAIpC,MAAA2I,EAAA,CAACD,GAAY5C,OAAK2B,KAAK,wBAAAsB,EAAAjJ,OAAA,GAAA2I,EAAA,UACxD,gBAAAQ,GAAA,OAAAT,EAAAxI,MAAA,KAAAjD,UAAA,EARD,MAQCN,CAAA,CAtVO,G","sources":["../node_modules/@thirdweb-dev/sdk/dist/vote-f543c525.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { cM as ContractWrapper, am as ContractMetadata, da as VoteContractSchema, al as ContractEncoder, aW as GasCostEstimator, aX as ContractEvents, aY as ContractInterceptor, b6 as VoteType, b8 as fetchCurrencyValue, b9 as fetchCurrencyMetadata } from './thirdweb-checkout-2c8d478b.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { BigNumber, ethers, Contract } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport 'bs58';\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"vote\");\n * ```\n *\n * @public\n */\nclass Vote {\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"_chainId\", void 0);\n    this._chainId = chainId;\n    this.abi = abi;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, VoteContractSchema, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n  async get(proposalId) {\n    const all = await this.getAll();\n    const proposals = all.filter(p => p.proposalId.eq(BigNumber.from(proposalId)));\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this contract.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await contract.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns - All the proposals in the contract.\n   */\n  async getAll() {\n    return Promise.all((await this.contractWrapper.readContract.getAllProposals()).map(async data => ({\n      proposalId: data.proposalId,\n      proposer: data.proposer,\n      description: data.description,\n      startBlock: data.startBlock,\n      endBlock: data.endBlock,\n      state: await this.contractWrapper.readContract.state(data.proposalId),\n      votes: await this.getProposalVotes(data.proposalId),\n      executions: data[3].map((c, i) => ({\n        toAddress: data.targets[i],\n        nativeTokenValue: c,\n        transactionData: data.calldatas[i]\n      }))\n    })));\n  }\n\n  /**\n   * Get the votes for a specific proposal\n   * @param proposalId - the proposalId\n   */\n  async getProposalVotes(proposalId) {\n    const votes = await this.contractWrapper.readContract.proposalVotes(proposalId);\n    return [{\n      type: VoteType.Against,\n      label: \"Against\",\n      count: votes.againstVotes\n    }, {\n      type: VoteType.For,\n      label: \"For\",\n      count: votes.forVotes\n    }, {\n      type: VoteType.Abstain,\n      label: \"Abstain\",\n      count: votes.abstainVotes\n    }];\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await contract.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n  async hasVoted(proposalId, account) {\n    if (!account) {\n      account = await this.contractWrapper.getSignerAddress();\n    }\n    return this.contractWrapper.readContract.hasVoted(proposalId, account);\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await contract.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n  async canExecute(proposalId) {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    try {\n      await this.contractWrapper.callStatic().execute(tos, values, datas, descriptionHash);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balance() {\n    const balance = await this.contractWrapper.readContract.provider.getBalance(this.contractWrapper.readContract.address);\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance,\n      displayValue: ethers.utils.formatUnits(balance, 18)\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balanceOfToken(tokenAddress) {\n    const erc20 = new Contract(tokenAddress, ERC20Abi, this.contractWrapper.getProvider());\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, await erc20.balanceOf(this.contractWrapper.readContract.address));\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  async ensureExists(proposalId) {\n    try {\n      await this.contractWrapper.readContract.state(proposalId);\n    } catch (e) {\n      throw Error(`Proposal ${proposalId} not found`);\n    }\n  }\n\n  /**\n   * Get the Vote contract configuration\n   */\n  async settings() {\n    const [votingDelay, votingPeriod, votingTokenAddress, votingQuorumFraction, proposalTokenThreshold] = await Promise.all([this.contractWrapper.readContract.votingDelay(), this.contractWrapper.readContract.votingPeriod(), this.contractWrapper.readContract.token(), this.contractWrapper.readContract[\"quorumNumerator()\"](), this.contractWrapper.readContract.proposalThreshold()]);\n    const votingTokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), votingTokenAddress);\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString()\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Proposal\n   *\n   * @remarks Create a new proposal for token holders to vote on.\n   *\n   * @example\n   * ```javascript\n   * // The description of the proposal you want to pass\n   * const description = \"This is a great proposal - vote for it!\"\n   * // You can (optionally) pass in contract calls that will get executed when the proposal is executed.\n   * const executions = [\n   *   {\n   *     // The contract you want to make a call to\n   *     toAddress: \"0x...\",\n   *     // The amount of the native currency to send in this transaction\n   *     nativeTokenValue: 0,\n   *     // Transaction data that will be executed when the proposal is executed\n   *     // This is an example transfer transaction with a token contract (which you would need to setup in code)\n   *     transactionData: tokenContract.encoder.encode(\n   *       \"transfer\", [\n   *         fromAddress,\n   *         amount,\n   *       ]\n   *     ),\n   *   }\n   * ]\n   *\n   * const proposal = await contract.propose(description, executions);\n   * ```\n   *\n   * @param description - The description of the proposal.\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n   * @returns - The id of the created proposal and the transaction receipt.\n   */\n  async propose(description, executions) {\n    if (!executions) {\n      executions = [{\n        toAddress: this.contractWrapper.readContract.address,\n        nativeTokenValue: 0,\n        transactionData: \"0x\"\n      }];\n    }\n    const tos = executions.map(p => p.toAddress);\n    const values = executions.map(p => p.nativeTokenValue);\n    const datas = executions.map(p => p.transactionData);\n    const receipt = await this.contractWrapper.sendTransaction(\"propose\", [tos, values, datas, description]);\n    const event = this.contractWrapper.parseLogs(\"ProposalCreated\", receipt?.logs);\n    return {\n      id: event[0].args.proposalId,\n      receipt\n    };\n  }\n\n  /**\n   * Vote\n   *\n   * @remarks Vote on an active proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to vote on\n   * const proposalId = \"0\";\n   * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n   * const voteType = VoteType.For;\n   * // The (optional) reason for the vote\n   * const reason = \"I like this proposal!\";\n   *\n   * await contract.vote(proposalId, voteType, reason);\n   * ```\n   * @param proposalId - The proposal to cast a vote on.\n   * @param voteType - The position the voter is taking on their vote.\n   * @param reason - (optional) The reason for the vote.\n   */\n  async vote(proposalId, voteType) {\n    let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    await this.ensureExists(proposalId);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"castVoteWithReason\", [proposalId, voteType, reason])\n    };\n  }\n\n  /**\n   * Execute Proposal\n   *\n   * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID ofthe proposal you want to execute\n   * const proposalId = \"0\"\n   * await contract.execute(proposalId);\n   * ```\n   *\n   * @param proposalId - The proposal id to execute.\n   */\n  async execute(proposalId) {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"execute\", [tos, values, datas, descriptionHash])\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n\nexport { Vote };\n"],"names":["Vote","network","address","storage","_classCallCheck","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","_defineProperty","this","_chainId","metadata","ContractMetadata","VoteContractSchema","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","interceptor","ContractInterceptor","_createClass","key","get","value","updateSignerOrProvider","readContract","_get","_asyncToGenerator","_regeneratorRuntime","mark","_callee","proposalId","all","proposals","wrap","_context","prev","next","getAll","sent","filter","p","eq","BigNumber","Error","abrupt","stop","_x","apply","_getAll","_callee3","_this","_context3","t0","Promise","getAllProposals","t1","map","_ref","_callee2","data","_context2","proposer","t2","description","t3","startBlock","t4","endBlock","state","t5","getProposalVotes","t6","t7","c","i","toAddress","targets","nativeTokenValue","transactionData","calldatas","votes","executions","_x2","call","_getProposalVotes","_callee4","_context4","proposalVotes","type","VoteType","label","count","againstVotes","forVotes","abstainVotes","_x3","_hasVoted","_callee5","account","_context5","getSignerAddress","hasVoted","_x4","_x5","_canExecute","_callee6","proposal","tos","values","datas","descriptionHash","_context6","ensureExists","ethers","callStatic","execute","_x6","_balance","_callee7","balance","_context7","provider","getBalance","name","symbol","decimals","displayValue","_balanceOfToken","_callee8","tokenAddress","erc20","_context8","Contract","ERC20Abi","getProvider","fetchCurrencyValue","balanceOf","_x7","_ensureExists","_callee9","_context9","concat","_x8","_settings","_callee10","_yield$Promise$all","_yield$Promise$all2","votingDelay","votingPeriod","votingTokenAddress","votingQuorumFraction","proposalTokenThreshold","votingTokenMetadata","_context10","token","proposalThreshold","_slicedToArray","fetchCurrencyMetadata","toString","_propose","_callee11","receipt","event","_context11","sendTransaction","parseLogs","logs","id","args","_x9","_x10","_vote","_callee12","voteType","reason","_args12","_context12","_x11","_x12","_execute","_callee13","_context13","_x13","_call","_callee14","functionName","_this$contractWrapper","_len","_key","_args14","_context14","Array","_x14"],"sourceRoot":""}