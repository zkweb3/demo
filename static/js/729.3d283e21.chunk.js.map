{"version":3,"file":"static/js/729.3d283e21.chunk.js","mappings":"mSAsFMA,G,kkBAAS,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GA4Bb,SAAAA,EAAYK,EAASC,EAASC,GAAS,IAAAC,GAAAC,EAAAA,EAAAA,GAAA,KAAAT,GACrC,IAAIU,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC/EG,EAAMH,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAC5CE,EAAUJ,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAChDG,EAAkBL,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,IAAIM,EAAAA,GAAgBZ,EAASC,EAASQ,EAAKJ,GAqBnC,OApBlGF,EAAAL,EAAAe,KAAA,KAAMF,EAAiBT,EAASQ,IAChCI,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,GAAAZ,GAAO,WAAO,IAC7BW,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,GAAAZ,GAAO,gBAAY,IAClCW,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,GAAAZ,GAAO,aAAS,IAC/BW,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,GAAAZ,GAAO,eAAW,IACjCW,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,GAAAZ,GAAO,iBAAa,IACnCW,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,GAAAZ,GAAO,aAAS,IAC/BW,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,GAAAZ,GAAO,oBAAgB,IACtCW,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,GAAAZ,GAAO,cAAU,IAChCW,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,GAAAZ,GAAO,uBAAmB,IACzCW,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,GAAAZ,GAAO,mBAAe,GACrCA,EAAKM,IAAMA,EACXN,EAAKa,SAAW,IAAIC,EAAAA,GAAiBd,EAAKQ,gBAAiBO,EAAAA,GAAyBf,EAAKD,SACzFC,EAAKgB,MAAQ,IAAIC,EAAAA,GAAcjB,EAAKQ,gBAAiBhB,EAAU0B,eAC/DlB,EAAKmB,QAAU,IAAIC,EAAAA,GAAgBpB,EAAKQ,iBACxCR,EAAKqB,UAAY,IAAIC,EAAAA,GAAiBtB,EAAKQ,iBAC3CR,EAAKuB,OAAS,IAAIC,EAAAA,GAAexB,EAAKQ,iBACtCR,EAAKyB,MAAQ,IAAIC,EAAAA,GAAoB1B,EAAKQ,iBAC1CR,EAAK2B,aAAe,IAAIC,EAAAA,GAAoB5B,EAAKQ,iBACjDR,EAAK6B,YAAc,IAAIC,EAAAA,GAAoB9B,EAAKQ,iBAChDR,EAAK+B,gBAAkB,IAAIC,EAAAA,GAAoBhC,EAAKQ,gBAAiBR,EAAKa,SAAUb,EAAKD,SAASC,CACpG,CA+IC,OAzIDiC,EAAAA,EAAAA,GAAAzC,EAAA,EAAA0C,IAAA,iBAAAC,MAAA,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAKA,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACmB,OADnBF,EAAAG,GACeC,KAAIJ,EAAAE,KAAA,EAAwBE,KAAKtC,gBAAgBuC,mBAAkB,cAAAL,EAAAM,GAAAN,EAAAO,KAAAP,EAAAE,KAAA,EAAAF,EAAAG,GAA9DK,iBAAgBxC,KAAAgC,EAAAG,GAAAH,EAAAM,IAAA,cAAAN,EAAAS,OAAC,SAADT,EAAAO,MAAA,wBAAAP,EAAAU,OAAA,GAAAZ,EAAA,UACnC,yBAAAJ,EAAAiB,MAAA,KAAAlD,UAAA,EAPD,IAOC,CAAA+B,IAAA,mBAAAC,MAAA,eAAAmB,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MACD,SAAAgB,EAAuBC,GAAO,OAAAlB,EAAAA,EAAAA,KAAAG,MAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OACL,OADKa,EAAAZ,GACfC,KAAKY,MAAKD,EAAAb,KAAA,EAAgBE,KAAKtC,gBAAgBmD,aAAaC,SAASJ,GAAQ,cAAAC,EAAAT,GAAAS,EAAAR,KAAAQ,EAAAb,KAAA,EAAAa,EAAAZ,GAAlEgB,SAAQnD,KAAA+C,EAAAZ,GAAAY,EAAAT,IAAA,cAAAS,EAAAN,OAAC,SAADM,EAAAR,MAAA,wBAAAQ,EAAAL,OAAA,GAAAG,EAAA,UACjC,gBAAAO,GAAA,OAAAR,EAAAD,MAAA,KAAAlD,UAAA,EAHA,IAKD,CAAA+B,IAAA,gBAAAC,MAAA,eAAA4B,GAAA1B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAKA,SAAAyB,IAAA,OAAA1B,EAAAA,EAAAA,KAAAG,MAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,OACmB,OADnBqB,EAAApB,GACeC,KAAImB,EAAArB,KAAA,EAAuBE,KAAKtC,gBAAgBuC,mBAAkB,cAAAkB,EAAAjB,GAAAiB,EAAAhB,KAAAgB,EAAArB,KAAA,EAAAqB,EAAApB,GAA7DqB,gBAAexD,KAAAuD,EAAApB,GAAAoB,EAAAjB,IAAA,cAAAiB,EAAAd,OAAC,SAADc,EAAAhB,MAAA,wBAAAgB,EAAAb,OAAA,GAAAY,EAAA,UAClC,yBAAAD,EAAAV,MAAA,KAAAlD,UAAA,EAPD,IASA,CAAA+B,IAAA,kBAAAC,MAAA,eAAAgC,GAAA9B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAKA,SAAA6B,EAAsBZ,GAAO,OAAAlB,EAAAA,EAAAA,KAAAG,MAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,cAAAyB,EAAAzB,KAAA,EACdE,KAAKtC,gBAAgBmD,aAAaW,UAAUd,GAAQ,cAAAa,EAAAlB,OAAA,SAAAkB,EAAApB,MAAA,wBAAAoB,EAAAjB,OAAA,GAAAgB,EAAA,UAClE,gBAAAG,GAAA,OAAAJ,EAAAd,MAAA,KAAAlD,UAAA,EAPD,IASA,CAAA+B,IAAA,uBAAAC,MAAA,eAAAqC,GAAAnC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAGA,SAAAkC,IAAA,IAAAC,EAAA,OAAApC,EAAAA,EAAAA,KAAAG,MAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,cAAA+B,EAAA/B,KAAA,EACkCE,KAAKtC,gBAAgBmD,aAAaiB,SAAQC,EAAAA,EAAAA,IAAY,YAAaC,EAAAA,GAAsB,OAAlG,OAAjBJ,EAAiBC,EAAA1B,KAAA0B,EAAAxB,OAAA,UACfuB,GAAiB,wBAAAC,EAAAvB,OAAA,GAAAqB,EAAA,UAC1B,yBAAAD,EAAAnB,MAAA,KAAAlD,UAAA,EAND,IAYA,CAAA+B,IAAA,QAAAC,MAAA,eAAA4C,GAAA1C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAMA,SAAAyC,EAAYC,GAAM,IAAAC,EAAAC,EAAAhF,UAAA,OAAAmC,EAAAA,EAAAA,KAAAG,MAAA,SAAA2C,GAAA,cAAAA,EAAAzC,KAAAyC,EAAAxC,MAAA,OAEL,OADPsC,IAAsBC,EAAU/E,OAAS,QAAsBC,IAAjB8E,EAAU,KAAmBA,EAAU,GAASC,EAAAvC,GAC3FC,KAAIsC,EAAAxC,KAAA,EAAeE,KAAKtC,gBAAgBuC,mBAAkB,OAA6B,OAA7BqC,EAAApC,GAAAoC,EAAAnC,KAAAmC,EAAAC,GAAEJ,EAAMG,EAAAE,GAAEJ,EAAmBE,EAAAjC,OAAA,SAAAiC,EAAAvC,GAAlF0C,QAAO7E,KAAA0E,EAAAvC,GAAAuC,EAAApC,GAAAoC,EAAAC,GAAAD,EAAAE,KAAA,wBAAAF,EAAAhC,OAAA,GAAA4B,EAAA,UACpB,gBAAAQ,GAAA,OAAAT,EAAA1B,MAAA,KAAAlD,UAAA,EATD,IAWA,CAAA+B,IAAA,UAAAC,MAAA,eAAAsD,GAAApD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAoBA,SAAAmD,EAAcC,EAAoBV,GAAM,IAAAC,EAAAU,EAAAzF,UAAA,OAAAmC,EAAAA,EAAAA,KAAAG,MAAA,SAAAoD,GAAA,cAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,OAC4D,OAA9FsC,IAAsBU,EAAUxF,OAAS,QAAsBC,IAAjBuF,EAAU,KAAmBA,EAAU,GAASC,EAAA1C,OAAA,SAC3FL,KAAKY,MAAM6B,QAAQI,EAAoBV,EAAQ,CACpDC,oBAAAA,KACA,wBAAAW,EAAAzC,OAAA,GAAAsC,EAAA,UACH,gBAAAI,EAAAC,GAAA,OAAAN,EAAApC,MAAA,KAAAlD,UAAA,EAzBD,IA2BA,CAAA+B,IAAA,aAAAC,MAAA,eAAA6D,GAAA3D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAMA,SAAA0D,EAAiBC,GAAgB,OAAA5D,EAAAA,EAAAA,KAAAG,MAAA,SAAA0D,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,cAAAuD,EAAAvD,KAAA,EAEdE,KAAKtC,gBAAgB4F,gBAAgB,WAAY,CAACF,IAAkB,cAAAC,EAAAtD,GAAAsD,EAAAlD,KAAAkD,EAAAhD,OAAA,UAAnFkD,QAAOF,EAAAtD,KAAA,wBAAAsD,EAAA/C,OAAA,GAAA6C,EAAA,UAEV,gBAAAK,GAAA,OAAAN,EAAA3C,MAAA,KAAAlD,UAAA,EAVD,IAYA,CAAA+B,IAAA,aAAAC,MAAA,eAAAoE,GAAAlE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAaA,SAAAiE,EAAiBvB,GAAM,OAAA3C,EAAAA,EAAAA,KAAAG,MAAA,SAAAgE,GAAA,cAAAA,EAAA9D,KAAA8D,EAAA7D,MAAA,cAAA6D,EAAAtD,OAAA,SACdL,KAAKY,MAAMgD,KAAKzB,IAAO,wBAAAwB,EAAArD,OAAA,GAAAoD,EAAA,UAC/B,gBAAAG,GAAA,OAAAJ,EAAAlD,MAAA,KAAAlD,UAAA,EAfD,IAiBA,CAAA+B,IAAA,WAAAC,MAAA,eAAAyE,GAAAvE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAgBA,SAAAsE,EAAeC,EAAQ7B,GAAM,OAAA3C,EAAAA,EAAAA,KAAAG,MAAA,SAAAsE,GAAA,cAAAA,EAAApE,KAAAoE,EAAAnE,MAAA,cAAAmE,EAAA5D,OAAA,SACpBL,KAAKY,MAAMsD,SAASF,EAAQ7B,IAAO,wBAAA8B,EAAA3D,OAAA,GAAAyD,EAAA,UAC3C,gBAAAI,EAAAC,GAAA,OAAAN,EAAAvD,MAAA,KAAAlD,UAAA,EAlBD,IAoBA,CAAA+B,IAAA,OAAAC,MAAA,eAAAgF,GAAA9E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAGA,SAAA6E,EAAWC,GAAY,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAvH,UAAA,OAAAmC,EAAAA,EAAAA,KAAAG,MAAA,SAAAkF,GAAA,cAAAA,EAAAhF,KAAAgF,EAAA/E,MAAA,OACrB,IAAS2E,EAAOG,EAAUtH,OAAQoH,EAAO,IAAII,MAAML,EAAO,EAAIA,EAAO,EAAI,GAAIE,EAAO,EAAGA,EAAOF,EAAME,IAClGD,EAAKC,EAAO,GAAKC,EAAUD,GAC5B,OAAAE,EAAAxE,OAAA,UACMmE,EAAAxE,KAAKtC,iBAAgBE,KAAI2C,MAAAiE,EAAA,CAACD,GAAYQ,OAAKL,KAAK,wBAAAG,EAAAvE,OAAA,GAAAgE,EAAA,UACxD,gBAAAU,GAAA,OAAAX,EAAA9D,MAAA,KAAAlD,UAAA,EARD,MAQCX,CAAA,CArMY,CAASuI,EAAAA,MAuMxBpH,EAAAA,EAAAA,GAAgBnB,EAAW,gBAAiB,CAAC,QAAS,Y","sources":["../node_modules/@thirdweb-dev/sdk/dist/token-drop-dd991dc9.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { aA as StandardErc20, cM as ContractWrapper, am as ContractMetadata, d8 as DropErc20ContractSchema, an as ContractRoles, al as ContractEncoder, aW as GasCostEstimator, aX as ContractEvents, ap as ContractPrimarySale, aZ as ContractPlatformFee, aY as ContractInterceptor, ar as DropClaimConditions, bC as getRoleHash } from './thirdweb-checkout-2c8d478b.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport 'bs58';\n\n/**\n * Create a Drop contract for a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token-drop\");\n * ```\n *\n */\nclass TokenDrop extends StandardErc20 {\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim Tokens, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 3117.42, // limit how many tokens are released in this presale\n   *     price: 0.001, // presale price per token\n   *     snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.008, // public sale price per token\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"claimConditions\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc20ContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, TokenDrop.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.readContract.getVotes(account));\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegationOf(account) {\n    return await this.contractWrapper.readContract.delegates(account);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Claim a certain amount of tokens\n   * @remarks See {@link TokenDrop.claimTo}\n   * @param amount - the amount of tokens to mint\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   */\n  async claim(amount) {\n    let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.claimTo(await this.contractWrapper.getSignerAddress(), amount, checkERC20Allowance);\n  }\n\n  /**\n   * Claim a certain amount of tokens to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - The transaction receipt\n   */\n  async claimTo(destinationAddress, amount) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.erc20.claimTo(destinationAddress, amount, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  async delegateTo(delegateeAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"delegate\", [delegateeAddress])\n    };\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n  async burnTokens(amount) {\n    return this.erc20.burn(amount);\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  async burnFrom(holder, amount) {\n    return this.erc20.burnFrom(holder, amount);\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(TokenDrop, \"contractRoles\", [\"admin\", \"transfer\"]);\n\nexport { TokenDrop };\n"],"names":["TokenDrop","_StandardErc","_inherits","_super","_createSuper","network","address","storage","_this","_classCallCheck","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","call","_defineProperty","_assertThisInitialized","metadata","ContractMetadata","DropErc20ContractSchema","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","sales","ContractPrimarySale","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","claimConditions","DropClaimConditions","_createClass","key","value","_getVoteBalance","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","t0","this","getSignerAddress","t1","sent","getVoteBalanceOf","abrupt","stop","apply","_getVoteBalanceOf","_callee2","account","_context2","erc20","readContract","getVotes","getValue","_x","_getDelegation","_callee3","_context3","getDelegationOf","_getDelegationOf","_callee4","_context4","delegates","_x2","_isTransferRestricted","_callee5","anyoneCanTransfer","_context5","hasRole","getRoleHash","constants","_claim","_callee6","amount","checkERC20Allowance","_args6","_context6","t2","t3","claimTo","_x3","_claimTo","_callee7","destinationAddress","_args7","_context7","_x4","_x5","_delegateTo","_callee8","delegateeAddress","_context8","sendTransaction","receipt","_x6","_burnTokens","_callee9","_context9","burn","_x7","_burnFrom","_callee10","holder","_context10","burnFrom","_x8","_x9","_call","_callee11","functionName","_this$contractWrapper","_len","args","_key","_args11","_context11","Array","concat","_x10","StandardErc20"],"sourceRoot":""}