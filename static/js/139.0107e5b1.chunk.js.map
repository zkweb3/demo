{"version":3,"file":"static/js/139.0107e5b1.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/edition-2913993b.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { aS as StandardErc1155, cM as ContractWrapper, am as ContractMetadata, cO as TokenErc1155ContractSchema, an as ContractRoles, ao as ContractRoyalty, ap as ContractPrimarySale, al as ContractEncoder, aW as GasCostEstimator, aX as ContractEvents, aZ as ContractPlatformFee, aY as ContractInterceptor, aP as Erc1155SignatureMintable, aL as Erc1155, a$ as ContractOwner, bC as getRoleHash } from './thirdweb-checkout-2c8d478b.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport 'bs58';\n\n/**\n * Create a collection of NFTs that lets you mint multiple copies of each NFT.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"edition\");\n * ```\n *\n * @public\n */\nclass Edition extends StandardErc1155 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"signature\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"erc1155\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc1155ContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Edition.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc1155SignatureMintable(this.contractWrapper, this.storage, this.roles);\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint NFT for the connected wallet\n   *\n   * @remarks See {@link Edition.mintTo}\n   */\n  async mint(metadataWithSupply) {\n    return this.erc1155.mint(metadataWithSupply);\n  }\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.mintTo(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  async mintTo(to, metadataWithSupply) {\n    return this.erc1155.mintTo(to, metadataWithSupply);\n  }\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadataWithSupply - The metadata of the NFT you want to mint\n   */\n  async getMintTransaction(receiver, metadataWithSupply) {\n    return this.erc1155.getMintTransaction(receiver, metadataWithSupply);\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to the connected wallet\n   *\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  async mintAdditionalSupply(tokenId, additionalSupply) {\n    return this.erc1155.mintAdditionalSupply(tokenId, additionalSupply);\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  async mintAdditionalSupplyTo(to, tokenId, additionalSupply) {\n    return this.erc1155.mintAdditionalSupplyTo(to, tokenId, additionalSupply);\n  }\n\n  /**\n   * Mint Many NFTs for the connected wallet\n   *\n   * @remarks See {@link Edition.mintBatchTo}\n   */\n  async mintBatch(metadatas) {\n    return this.erc1155.mintBatch(metadatas);\n  }\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  async mintBatchTo(to, metadataWithSupply) {\n    return this.erc1155.mintBatchTo(to, metadataWithSupply);\n  }\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnTokens(tokenId, amount);\n   * ```\n   */\n  async burn(tokenId, amount) {\n    return this.erc1155.burn(tokenId, amount);\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(Edition, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { Edition };\n"],"names":["Edition","_StandardErc","_inherits","_super","_createSuper","network","address","storage","_this","_classCallCheck","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","call","_defineProperty","_assertThisInitialized","metadata","ContractMetadata","TokenErc1155ContractSchema","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","signature","Erc1155SignatureMintable","erc1155","Erc1155","owner","ContractOwner","_createClass","key","value","this","updateSignerOrProvider","readContract","_getAll","_asyncToGenerator","_regeneratorRuntime","mark","_callee","queryParams","wrap","_context","prev","next","abrupt","getAll","stop","_x","apply","_getOwned","_callee2","walletAddress","_context2","getOwned","_x2","_getTotalCount","_callee3","_context3","totalCount","_isTransferRestricted","_callee4","anyoneCanTransfer","_context4","hasRole","getRoleHash","constants","sent","_mint","_callee5","metadataWithSupply","_context5","mint","_x3","_mintTo","_callee6","to","_context6","mintTo","_x4","_x5","_getMintTransaction","_callee7","receiver","_context7","getMintTransaction","_x6","_x7","_mintAdditionalSupply","_callee8","tokenId","additionalSupply","_context8","mintAdditionalSupply","_x8","_x9","_mintAdditionalSupplyTo","_callee9","_context9","mintAdditionalSupplyTo","_x10","_x11","_x12","_mintBatch","_callee10","metadatas","_context10","mintBatch","_x13","_mintBatchTo","_callee11","_context11","mintBatchTo","_x14","_x15","_burn","_callee12","amount","_context12","burn","_x16","_x17","_call","_callee13","functionName","_this$contractWrapper","_len","args","_key","_args13","_context13","Array","concat","_x18","StandardErc1155"],"sourceRoot":""}