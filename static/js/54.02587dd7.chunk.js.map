{"version":3,"file":"static/js/54.02587dd7.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/signature-drop-2b7b28c3.esm.js"],"sourcesContent":["import { _ as _defineProperty, c as DEFAULT_QUERY_ALL_COUNT } from './QueryParams-da88d27c.esm.js';\nimport { aK as StandardErc721, cM as ContractWrapper, am as ContractMetadata, d3 as DropErc721ContractSchema, an as ContractRoles, ao as ContractRoyalty, ap as ContractPrimarySale, al as ContractEncoder, aW as GasCostEstimator, aX as ContractEvents, aZ as ContractPlatformFee, aY as ContractInterceptor, aB as Erc721, ar as DropClaimConditions, aE as Erc721WithQuantitySignatureMintable, aq as DelayedReveal, d4 as FEATURE_NFT_REVEALABLE, a$ as ContractOwner, cL as PaperCheckout, bC as getRoleHash } from './thirdweb-checkout-2c8d478b.esm.js';\nimport { BigNumber, constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport 'bs58';\n\n/**\n * Setup a collection of NFTs where when it comes to minting, you can authorize\n * some external party to mint tokens on your contract, and specify what exactly\n * will be minted by that external party..\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"signature-drop\");\n * ```\n *\n * @public\n */\nclass SignatureDrop extends StandardErc721 {\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const claimCondition = {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   * };\n   * await contract.claimConditions.set([claimCondition]);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"erc721\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"claimConditions\", void 0);\n    _defineProperty(this, \"revealer\", void 0);\n    _defineProperty(this, \"signature\", void 0);\n    _defineProperty(this, \"checkout\", void 0);\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, SignatureDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  async totalSupply() {\n    const claimed = await this.totalClaimedSupply();\n    const unclaimed = await this.totalUnclaimedSupply();\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  async getAllClaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxId = Math.min((await this.totalClaimedSupply()).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAllUnclaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const firstTokenId = BigNumber.from(Math.max((await this.totalClaimedSupply()).toNumber(), start));\n    const maxId = BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the claimed supply\n   */\n  async totalClaimedSupply() {\n    return this.erc721.totalClaimedSupply();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return this.erc721.totalUnclaimedSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  async createBatch(metadatas, options) {\n    return this.erc721.lazyMint(metadatas, options);\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, options);\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  async claimTo(destinationAddress, quantity, options) {\n    return this.erc721.claimTo(destinationAddress, quantity, options);\n  }\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  async claim(quantity, options) {\n    return this.erc721.claim(quantity, options);\n  }\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   */\n  async burn(tokenId) {\n    return this.erc721.burn(tokenId);\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(SignatureDrop, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { SignatureDrop };\n"],"names":["SignatureDrop","_StandardErc","_inherits","_super","_createSuper","network","address","storage","_this","_classCallCheck","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","call","_defineProperty","_assertThisInitialized","metadata","ContractMetadata","DropErc721ContractSchema","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","erc721","Erc721","claimConditions","DropClaimConditions","signature","Erc721WithQuantitySignatureMintable","revealer","DelayedReveal","FEATURE_NFT_REVEALABLE","nextTokenIdToMint","owner","ContractOwner","checkout","PaperCheckout","_createClass","key","value","this","updateSignerOrProvider","readContract","_totalSupply","_asyncToGenerator","_regeneratorRuntime","mark","_callee","claimed","unclaimed","wrap","_context","prev","next","totalClaimedSupply","sent","totalUnclaimedSupply","abrupt","add","stop","apply","_getAllClaimed","_callee2","queryParams","start","count","maxId","_this2","_context2","BigNumber","toNumber","DEFAULT_QUERY_ALL_COUNT","t0","Math","t1","t2","min","Promise","all","Array","from","keys","map","i","get","toString","_x","_getAllUnclaimed","_callee3","firstTokenId","_this3","_context3","t3","t4","max","t5","t6","t7","t8","t9","sub","getTokenMetadata","_x2","_totalClaimedSupply","_callee4","_context4","_totalUnclaimedSupply","_callee5","_context5","_isTransferRestricted","_callee6","anyoneCanTransfer","_context6","hasRole","getRoleHash","constants","_createBatch","_callee7","metadatas","_context7","lazyMint","_x3","_x4","_getClaimTransaction","_callee8","destinationAddress","quantity","_context8","getClaimTransaction","_x5","_x6","_x7","_claimTo","_callee9","_context9","claimTo","_x8","_x9","_x10","_claim","_callee10","_context10","claim","_x11","_x12","_burn","_callee11","tokenId","_context11","burn","_x13","_call","_callee12","functionName","_this$contractWrapper","_len","args","_key","_args12","_context12","concat","_x14","StandardErc721"],"sourceRoot":""}