{"version":3,"file":"static/js/728.bc78bede.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/multiwrap-48e23977.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { aK as StandardErc721, cM as ContractWrapper, am as ContractMetadata, c$ as MultiwrapContractSchema, an as ContractRoles, al as ContractEncoder, aW as GasCostEstimator, aX as ContractEvents, ao as ContractRoyalty, a$ as ContractOwner, b9 as fetchCurrencyMetadata, d0 as uploadOrExtractURI, ba as normalizePriceValue, d1 as hasERC20Allowance, cY as isTokenApprovedForTransfer } from './thirdweb-checkout-2c8d478b.esm.js';\nimport { ethers } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport 'bs58';\n\n/**\n * Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"multiwrap\");\n * ```\n *\n * @beta\n */\nclass Multiwrap extends StandardErc721 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, MultiwrapContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Multiwrap.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the contents of a wrapped token bundle\n   * @example\n   * ```javascript\n   * const contents = await contract.getWrappedContents(wrappedTokenId);\n   * console.log(contents.erc20Tokens);\n   * console.log(contents.erc721Tokens);\n   * console.log(contents.erc1155Tokens);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   */\n  async getWrappedContents(wrappedTokenId) {\n    const wrappedTokens = await this.contractWrapper.readContract.getWrappedContents(wrappedTokenId);\n    const erc20Tokens = [];\n    const erc721Tokens = [];\n    const erc1155Tokens = [];\n    for (const token of wrappedTokens) {\n      switch (token.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), token.assetContract);\n            erc20Tokens.push({\n              contractAddress: token.assetContract,\n              quantity: ethers.utils.formatUnits(token.totalAmount, tokenMetadata.decimals)\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId,\n              quantity: token.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Tokens,\n      erc721Tokens,\n      erc1155Tokens\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token\n   * @example\n   * ```javascript\n   * const tx = await contract.wrap({\n   *   erc20Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     quantity: \"0.8\"\n   *   }],\n   *   erc721Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"0\"\n   *   }],\n   *   erc1155Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"1\",\n   *     quantity: \"2\"\n   *   }]\n   * }, {\n   *     name: \"Wrapped bundle\",\n   *     description: \"This is a wrapped bundle of tokens and NFTs\",\n   *     image: \"ipfs://...\",\n   * });\n   * const receipt = tx.receipt(); // the transaction receipt\n   * const wrappedTokenId = tx.id; // the id of the wrapped token bundle\n   * ```\n   * @param contents - the contents to wrap\n   * @param wrappedTokenMetadata - metadata to represent the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the wrapped token bundle to\n   */\n  async wrap(contents, wrappedTokenMetadata, recipientAddress) {\n    const uri = await uploadOrExtractURI(wrappedTokenMetadata, this.storage);\n    const recipient = recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress();\n    const tokens = await this.toTokenStructList(contents);\n    const receipt = await this.contractWrapper.sendTransaction(\"wrap\", [tokens, uri, recipient]);\n    const event = this.contractWrapper.parseLogs(\"TokensWrapped\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"TokensWrapped event not found\");\n    }\n    const tokenId = event[0].args.tokenIdOfWrappedToken;\n    return {\n      id: tokenId,\n      receipt,\n      data: () => this.get(tokenId)\n    };\n  }\n\n  /**\n   * Unwrap a wrapped token bundle, and retrieve its contents\n   * @example\n   * ```javascript\n   * await contract.unwrap(wrappedTokenId);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the unwrapped tokens to\n   */\n  async unwrap(wrappedTokenId, recipientAddress) {\n    const recipient = recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"unwrap\", [wrappedTokenId, recipient])\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toTokenStructList(contents) {\n    const tokens = [];\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    if (contents.erc20Tokens) {\n      for (const erc20 of contents.erc20Tokens) {\n        const normalizedQuantity = await normalizePriceValue(provider, erc20.quantity, erc20.contractAddress);\n        const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, normalizedQuantity);\n        if (!hasAllowance) {\n          throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${erc20.quantity});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc20.contractAddress,\n          totalAmount: normalizedQuantity,\n          tokenId: 0,\n          tokenType: 0\n        });\n      }\n    }\n    if (contents.erc721Tokens) {\n      for (const erc721 of contents.erc721Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc721.contractAddress,\n          totalAmount: 0,\n          tokenId: erc721.tokenId,\n          tokenType: 1\n        });\n      }\n    }\n    if (contents.erc1155Tokens) {\n      for (const erc1155 of contents.erc1155Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc1155.contractAddress,\n          totalAmount: erc1155.quantity,\n          tokenId: erc1155.tokenId,\n          tokenType: 2\n        });\n      }\n    }\n    return tokens;\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(Multiwrap, \"contractRoles\", [\"admin\", \"transfer\", \"minter\", \"unwrap\", \"asset\"]);\n\nexport { Multiwrap };\n"],"names":["Multiwrap","_StandardErc","_inherits","_super","_createSuper","network","address","storage","_this","_classCallCheck","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","call","_defineProperty","_assertThisInitialized","metadata","ContractMetadata","MultiwrapContractSchema","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","royalties","ContractRoyalty","owner","ContractOwner","_createClass","key","value","_getWrappedContents","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrappedTokenId","wrappedTokens","erc20Tokens","erc721Tokens","erc1155Tokens","_iterator","_step","token","tokenMetadata","wrap","_context","prev","next","this","readContract","getWrappedContents","sent","_createForOfIteratorHelper","s","n","done","t0","tokenType","fetchCurrencyMetadata","getProvider","assetContract","push","contractAddress","quantity","ethers","totalAmount","decimals","abrupt","tokenId","toString","t1","e","f","finish","stop","_x","apply","_wrap","_callee2","contents","wrappedTokenMetadata","recipientAddress","uri","recipient","tokens","receipt","event","_this2","_context2","uploadOrExtractURI","getSignerAddress","toTokenStructList","sendTransaction","parseLogs","logs","Error","args","tokenIdOfWrappedToken","id","data","get","_x2","_x3","_x4","_unwrap","_callee3","_context3","_x5","_x6","_toTokenStructList","_callee4","provider","_iterator2","_step2","erc20","normalizedQuantity","_iterator3","_step3","erc721","_iterator4","_step4","erc1155","_context4","normalizePriceValue","hasERC20Allowance","concat","getAddress","isTokenApprovedForTransfer","t2","_x7","_call","_callee5","functionName","_this$contractWrapper","_len","_key","_args5","_context5","Array","_x8","StandardErc721"],"sourceRoot":""}